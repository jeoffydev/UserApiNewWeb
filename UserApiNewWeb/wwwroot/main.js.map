{"version":3,"sources":["./src/app/register/register.component.ts","./src/app/register/register.component.html","./src/environments/environment.ts","./src/app/register-view-model.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/login-view-model.ts","./src/app/app.module.ts","./src/app/login.service.ts","./src/app/register.service.ts","./src/app/stories/stories.component.ts","./src/app/stories/stories.component.html","./src/app/app-routing.module.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { RegisterService } from './../register.service';\r\nimport { RegisterViewModel } from './../register-view-model';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  rvm: RegisterViewModel = new RegisterViewModel(); \r\n  thisMessage: any;\r\n  constructor(private registerService: RegisterService) { }\r\n  \r\n  \r\n  ngOnInit(): void {\r\n    this.thisMessage = false;\r\n  }\r\n\r\n  onRegisterClick(event){ \r\n    return this.registerService.Register(this.rvm).subscribe(\r\n      (response) => { \r\n        console.log(response); \r\n        this.thisMessage = \"Thank you. Please login now\";\r\n     },\r\n      (error) => { console.log(error); }\r\n    )\r\n\r\n  }\r\n\r\n}\r\n"," \r\n\r\n<div class=\"container\"> \r\n    <div class=\"row\">\r\n        <div class=\"col-md-3\">&nbsp;</div>\r\n        <div class=\"col-md-6\">\r\n            <div class=\"alert\" *ngIf=\"thisMessage\">{{thisMessage}}</div>\r\n                <form>\r\n                        <div class=\"form-group\">\r\n                                <label for=\"exampleInputEmail1\">Full Name</label>\r\n                                <input type=\"text\" class=\"form-control\" [(ngModel)]=\"rvm.FullName\"  name=\"FullName\" > \r\n                              </div>\r\n                        <div class=\"form-group\">\r\n                          <label for=\"exampleInputEmail1\">Username</label>\r\n                          <input type=\"text\" class=\"form-control\" [(ngModel)]=\"rvm.UserName\"  name=\"UserName\" > \r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                          <label for=\"exampleInputPassword1\">Password</label>\r\n                          <input type=\"password\" class=\"form-control\" [(ngModel)]=\"rvm.Password\"  name =\"Password\" >\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"exampleInputPassword1\">Confirm Password</label>\r\n                            <input type=\"password\" class=\"form-control\"  [(ngModel)]=\"rvm.ConfirmPassword\" name =\"ConfirmPassword\" >\r\n                          </div> \r\n                        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"onRegisterClick($event)\">Submit</button>\r\n                    </form>\r\n\r\n        </div>\r\n        <div class=\"col-md-3\">&nbsp;</div>\r\n    </div> \r\n</div>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","export class RegisterViewModel {\r\n\r\n    FullName: string;\r\n    UserName: string;\r\n    Password: string;\r\n    ConfirmPassword: string;\r\n\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'user-api';\r\n}\r\n","<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n  <a class=\"navbar-brand\"  routerLink=\"/\">Navbar</a>\r\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span class=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n\r\n  <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n    <ul class=\"navbar-nav mr-auto\">\r\n      <li class=\"nav-item active\">\r\n        <a class=\"nav-link\" routerLink=\"/\">Home </a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n          <a class=\"nav-link\" routerLink=\"/login\">Login</a>\r\n        </li> \r\n      <li class=\"nav-item\">\r\n        <a class=\"nav-link\" routerLink=\"/register\">Register</a>\r\n      </li> \r\n       \r\n    </ul> \r\n  </div>\r\n</nav>\r\n\r\n<router-outlet></router-outlet>","export class LoginViewModel { \r\n    UserName: string;\r\n    Password: string;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { StoriesComponent } from './stories/stories.component';\r\nimport {HttpClientModule} from '@angular/common/http';\r\nimport {FormsModule} from '@angular/forms';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    StoriesComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule, \r\n    HttpClientModule,\r\n    FormsModule\r\n    \r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { LoginViewModel } from './login-view-model';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginService {\r\n\r\n  thisApiUrl: any = 'http://localhost:43573';\r\n\r\n  constructor(private httpclient: HttpClient) { }\r\n\r\n  public Login(logs: LoginViewModel): Observable<any>{ \r\n    return this.httpclient.post<any>(\"/api/login\", logs, { responseType: \"json\" })\r\n    .pipe(map(log => {  \r\n       return log; \r\n    }));\r\n  }\r\n\r\n\r\n\r\n}\r\n","\r\nimport { Injectable } from '@angular/core'; \r\nimport { RegisterViewModel } from './register-view-model';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RegisterService {\r\n\r\n  thisApiUrl: any = 'http://localhost:43573';\r\n\r\n  constructor(private httpclient: HttpClient) { \r\n   \r\n  }\r\n\r\n  public Register(rvm: RegisterViewModel): Observable<any>{\r\n    console.log(rvm);\r\n    return this.httpclient.post<any>(\"/api/register\", rvm, { responseType: \"json\" })\r\n    .pipe(map(reg => {  \r\n       return reg; \r\n    }));\r\n  }\r\n\r\n  \r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-stories',\r\n  templateUrl: './stories.component.html',\r\n  styleUrls: ['./stories.component.css']\r\n})\r\nexport class StoriesComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>stories works!</p>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { LoginComponent } from './login/login.component';\r\n\r\nconst routes: Routes = [\r\n  {path: \"register\", component : RegisterComponent},\r\n  {path: \"login\", component : LoginComponent}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n"," \r\nimport { Component, OnInit } from '@angular/core';\r\nimport { LoginViewModel } from '../login-view-model';\r\nimport { LoginService } from '../login.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  login : LoginViewModel = new LoginViewModel();\r\n  thisMessage: any;\r\n  constructor(private loginservice: LoginService) {  \r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.thisMessage = false;\r\n  }\r\n\r\n  onLoginClick (event){ \r\n    return this.loginservice.Login(this.login).subscribe(\r\n      (response) => {\r\n        console.log(response);\r\n      },\r\n      (error)=> {\r\n        console.log(error);\r\n      }\r\n    )\r\n  }\r\n\r\n}\r\n","<div class=\"container\"> \r\n        <div class=\"row\">\r\n            <div class=\"col-md-3\">&nbsp;</div>\r\n            <div class=\"col-md-6\">\r\n                <div class=\"alert\" *ngIf=\"thisMessage\">{{thisMessage}}</div>\r\n                    <form>\r\n                           \r\n                            <div class=\"form-group\">\r\n                              <label for=\"exampleInputEmail1\">Username</label>\r\n                              <input type=\"text\" class=\"form-control\" [(ngModel)]=\"login.UserName\"  name=\"UserName\" > \r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                              <label for=\"exampleInputPassword1\">Password</label>\r\n                              <input type=\"password\" class=\"form-control\" [(ngModel)]=\"login.Password\"  name =\"Password\" >\r\n                            </div>\r\n                            \r\n                            <button type=\"submit\" class=\"btn btn-primary\" (click)=\"onLoginClick($event)\">Submit</button>\r\n                        </form>\r\n    \r\n            </div>\r\n            <div class=\"col-md-3\">&nbsp;</div>\r\n        </div> \r\n    </div>","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}